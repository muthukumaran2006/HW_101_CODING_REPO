#Code for Vector0

module top_module ( 
    input wire [2:0] vec,
    output wire [2:0] outv,
    output wire o2,
    output wire o1,
    output wire o0  ); // Module body starts after module declaration

    assign o0=vec[0];
    assign o1=vec[1];
    assign o2=vec[2];
    assign outv=vec;
endmodule

#Code for Vectors1

`default_nettype none     // Disable implicit nets. Reduces some types of bugs.
module top_module( 
    input wire [15:0] in,
    output wire [7:0] out_hi,
    output wire [7:0] out_lo );

    assign out_hi=in[15:8];
    assign out_lo=in[7:0];
endmodule

#Code for Vectors2

module top_module( 
    input [31:0] in,
    output [31:0] out );

    assign out[31:24] =in[7:0];
    assign out[23:16] =in[15:8];
    assign out[15:8] =in[23:16];
    assign out[7:0] =in[31:24];

endmodule

#Code for Bitwise Operators

module top_module( 
    input [2:0] a,
    input [2:0] b,
    output [2:0] out_or_bitwise,
    output out_or_logical,
    output [5:0] out_not
);
    assign out_or_bitwise[0]=a[0] | b[0];
    assign out_or_bitwise[1]=a[1] | b[1];
    assign out_or_bitwise[2]=a[2] | b[2];
    assign out_or_logical=a || b;
    assign out_not[0] = ~a[0];
    assign out_not[1] = ~a[1];
    assign out_not[2] = ~a[2];
    assign out_not[3] = ~b[0];
    assign out_not[4] = ~b[1];
    assign out_not[5] = ~b[2];

endmodule

#Code for Four-input gates

module top_module( 
    input [3:0] in,
    output out_and,
    output out_or,
    output out_xor
);

    assign out_and = in[0] && in[1] && in[2] && in[3];
    assign out_or = in[0] | in[1] | in[2] | in[3];
    assign out_xor = in[0] ^  in[1] ^ in[2] ^ in[3];
endmodule

#Code for Vector concatenation operator

module top_module (
    input [4:0] a, b, c, d, e, f,
    output [7:0] w, x, y, z );//

    assign {w,x,y,z } = {a,b,c,d,e,f,2'b11};

endmodule

#Code for Vector reversal1

module top_module( 
    input [7:0] in,
    output [7:0] out
);

    assign out={in[0],in[1],in[2],in[3],in[4],in[5],in[6],in[7]};
endmodule

#Code for Replication operator

module top_module (
    input [7:0] in,
    output [31:0] out );//

    assign out={{24{in[7]}} ,in};
endmodule
